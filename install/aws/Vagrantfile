require 'pathname'
require 'securerandom'

# Username to ssh into VM instances (might be `root` for other images)
SSH_USERNAME = 'ubuntu'

AWS_ACCESS_KEY = ENV['AWS_ACCESS_KEY'] || 'my_aws_access_key'
AWS_SECRET_KEY = ENV['AWS_SECRET_KEY'] || 'my_aws_secret_key'

SSH_KEY_PATH = ENV['SSH_KEY_PATH'] || 'cloud-benchmarking.pem'
SSH_KEY_NAME = ENV['SSH_KEY_NAME'] || 'cloud-benchmarking'

##########################################################
CHEF_SERVER_IP = ENV['CHEF_SERVER_IP'] || File.read('chef_server_ip.env').strip

# Local paths
FILE_DIR = Pathname.new(__FILE__).parent.expand_path
REPO_ROOT = FILE_DIR.parent.parent.expand_path
COOKBOOKS = File.join(REPO_ROOT, 'cookbooks')
CWB_SERVER = File.join(COOKBOOKS, 'cwb-server')
CWB_CHEF_SERVER = File.join(COOKBOOKS, 'cwb-chef-server')

# @param file [String] the path of the cache file
# @param new_content [String] the content that should be cached into `file`
# @return [String] if `file` exists: the content of the file
#                  otherwise: `new_content` (will be saved to `file`)
def read_or_cache(file, new_content)
  content = File.read(file).strip # Ignore whitespace
  if content.empty?
    File.write(file, new_content)
    new_content
  else
    content
  end
end

VAGRANTFILE_API_VERSION = '2'
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # Detect vagrant-omnibus plugin
  if Vagrant.has_plugin?('vagrant-omnibus')
    config.omnibus.chef_version = '12.8.1' # or :latest
  else
    STDERR.puts 'FATAL: Vagrant-omnibus plugin not detected. Please install the plugin with
                 `vagrant plugin install vagrant-omnibus`.'
    exit
  end

  # Box
  config.vm.box     = 'aws'
  config.vm.box_url = 'https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box'

  # VM
  config.ssh.forward_agent = false
  config.vm.synced_folder '.', '/vagrant', disabled: true
  # Fix SMB username promt: https://github.com/mitchellh/vagrant-aws/issues/365
  config.vm.allowed_synced_folder_types = :rsync

  # Amazon EC2
  config.vm.provider :aws do |aws, override|
    # AWS authentication
    aws.access_key_id     = AWS_ACCESS_KEY
    aws.secret_access_key = AWS_SECRET_KEY

    # AWS instance configuration
    aws.region = 'eu-central-1'
    # Official Ubuntu 14.04 LTS amd64 hvm:ebs image from Canonical: https://cloud-images.ubuntu.com/locator/ec2/
    aws.ami = 'ami-097f7de2'
    aws.keypair_name = SSH_KEY_NAME
    override.ssh.private_key_path = SSH_KEY_PATH
    override.ssh.username = SSH_USERNAME
    aws.instance_type = 't2.small'
    aws.security_groups = ['cwb-web']
  end

  ### Chef-Server
  config.vm.define 'chef-server' do |chef_server|
    # VM
    chef_server.vm.hostname = 'chef-server' # MUST not contain spaces

    # Amazon EC2
    config.vm.provider :aws do |aws, override|
      aws.tags = {
          'Name' => 'chef-server-production'
      }
    end

    # Chef solo provisioning via berks-vendored cookbooks
    chef_server.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = "#{CWB_CHEF_SERVER}/berks-cookbooks"
      chef.add_recipe 'cwb-chef-server'
      chef.json = {
          'chef-server' => {
              # Current version as of 2016-03-28 is 12.4.1 (recommended with Ubuntu 14.04)
              # See: https://downloads.chef.io/chef-server/
              # Version 11 does not support 14.04: https://github.com/opscode-cookbooks/chef-server/issues/48
              # Commonly used 11.1.6 on older CWB instances (requires Ubuntu 12.04)
              'version' => '12.14.60', # or 'latest'
              # Provide if cookbook service is not working correctly (i.e. cookbooks cannot be uploaded).
              # Attempts to automatically detect public IP via Ohai/What's my ip query
              # 'api_fqdn' => CHEF_SERVER_IP
              # List of commercial addons: https://github.com/chef-cookbooks/chef-server#attributes
              # The management console (mange) is free up to 25 nodes
              # 'addons' => %w(manage)
          }
      }
    end
  end

  ### CWB-Server
  config.vm.define 'cwb-server', primary: true do |cwb_server|
    # VM
    cwb_server.vm.hostname = 'cwb-server' # MUST not contain spaces

    # Amazon EC2
    config.vm.provider :aws do |aws, override|
        aws.tags = {
          'Name' => 'cwb-server-production'
      }
    end

    # Chef solo provisioning via berks-vendored cookbooks
    # Run `vendor_berks_cookbooks.sh` to pick up changes in the `cwb-server` cookbook
    cwb_server.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = "#{CWB_SERVER}/berks-cookbooks"
      chef.provisioning_path = '/etc/chef'
      chef.add_recipe 'cwb-server'
      # Convergence will currently fail on the first run because
      # the freshly installed Ruby is not yet available in the path
      chef.attempts = 2
      # Refer to `cookbooks/cwb-server/attributes/default.rb` for an
      # extensive list of configurable attributes
      chef.json =
          {
              'cwb-server' => {
                  'dev' => {
                      'tools' => %w(vim curl)
                  },
                  'ssh' => {
                      'key' => File.read(SSH_KEY_PATH),
                      'key_name' => SSH_KEY_NAME
                  },
                  'chef' => {
                      'server_host' => CHEF_SERVER_IP,
                      'node_name' => 'cwb-server',
                      'client_key' => File.read('cwb-server.pem'),
                      'client_key_name' => 'cwb-server',
                      'validation_key' => File.read('chef-validator.pem'),
                      'validation_key_name' => 'chef-validator',
                      # VM provisioning
                      'omnibus_chef_version' => '12.14.60'
                  },
                  'providers' => {
                      'aws' => {
                          'access_key' => AWS_ACCESS_KEY,
                          'secret_key' => AWS_SECRET_KEY
                      }
                  },
                  'env' => {
                      # We do not want to invalidate the secret on every provisioning
                      'SECRET_KEY_BASE' => read_or_cache('secret_key_base.env', SecureRandom.hex(64))
                  },
                  'app' => {
                      'user_password' => 'demo',
                      # Determines how many benchmarks can be prepared, started, or released in parallel.
                      # Keep in mind that workers are memory-intensive because the currently load the entire Rails environment.
                      'num_workers' => 2
                  },
                  'db' => {
                    'postgres_password' => 'rootcloud'
                  },
                  'nginx' => {
                      # 'hostname' => 'PUBLIC_HOST_OR_IP'
                  }
              },
              # For a list of time zones see: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
              'tz' => 'Europe/Zurich',
          }
    end
  end
end
