### DISCLAIMER
# This configuration supports local development of CWB.
# CWB will not work properly within Virtualbox because
# it requires public IPs to support full functionality!

require 'pathname'
require 'securerandom'
# For debugging via `binding.pry` http://pryrepl.org/
begin; require 'pry'; rescue LoadError; end

# Username to ssh into VM instances (might be `root` for other images)
SSH_USERNAME = 'ubuntu'

# Providers
# Security credentials > Users: https://console.aws.amazon.com/iam/home?#/users
AWS_ACCESS_KEY = ENV['AWS_ACCESS_KEY'] || 'my_aws_access_key'
AWS_SECRET_KEY = ENV['AWS_SECRET_KEY'] || 'my_aws_secret_key'

# Setup: https://github.com/mitchellh/vagrant-google#google-cloud-platform-setup
# Credentials: https://console.cloud.google.com/apis/credentials
# => Click "Manage service accounts" and create a JSON key
GOOGLE_PROJECT_ID = ENV['GOOGLE_PROJECT_ID'] || 'my_google_project_id'
GOOGLE_CLIENT_EMAIL = ENV['GOOGLE_CLIENT_EMAIL'] || 'my_google_client_email'
GOOGLE_JSON_KEY_PATH = ENV['GOOGLE_JSON_KEY_PATH'] || 'my_google_json_key_path'

# Get Azure credentials via Azure CLI: https://github.com/Azure/vagrant-azure#create-an-azure-active-directory-aad-application
AZURE_TENANT_ID = ENV['AZURE_TENANT_ID'] || 'my_azure_tenant_id'
AZURE_CLIENT_ID = ENV['AZURE_CLIENT_ID'] || 'my_azure_client_id'
AZURE_CLIENT_SECRET = ENV['AZURE_CLIENT_SECRET'] || 'my_azure_client_secret'
AZURE_SUBSCRIPTION_ID = ENV['AZURE_SUBSCRIPTION_ID'] || 'my_azure_subscription_id'

# SSH key
SSH_KEY_PATH = ENV['SSH_KEY_PATH'] || 'cloud-benchmarking.pem'
SSH_KEY_NAME = ENV['SSH_KEY_NAME'] || 'cloud-benchmarking'

##########################################################
# Must be an IP here (used in Virtualbox config)
CHEF_SERVER_IP = ENV['CHEF_SERVER_IP'] || File.read('chef_server_ip.env').strip
CWB_SERVER_IP  = '33.33.33.20'

fail "No SSH key found at #{SSH_KEY_PATH}" unless File.exist?(SSH_KEY_PATH)

# Local paths
FILE_DIR = Pathname.new(__FILE__).parent.expand_path
REPO_ROOT = FILE_DIR.parent.parent.expand_path
COOKBOOKS = File.join(REPO_ROOT, 'cookbooks')
CWB_SERVER = File.join(COOKBOOKS, 'cwb-server')
CWB_CHEF_SERVER = File.join(COOKBOOKS, 'cwb-chef-server')

# @param file [String] the path of the cache file
# @param new_content [String] the content that should be cached into `file`
# @return [String] if `file` exists: the content of the file
#                  otherwise: `new_content` (will be saved to `file`)
def read_or_cache(file, new_content)
  content = File.read(file).strip # Ignore whitespace
  if content.empty?
    File.write(file, new_content)
    new_content
  else
    content
  end
end

VAGRANTFILE_API_VERSION = '2'
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # Detect vagrant-omnibus plugin
  if Vagrant.has_plugin?('vagrant-omnibus')
    config.omnibus.chef_version = '14.8.12' # or :latest
  else
    STDERR.puts 'FATAL: Vagrant-omnibus plugin not detected. Please install the plugin with
                 `vagrant plugin install vagrant-omnibus`.'
    exit
  end

  # Detect vagrant-cachier plugin
  if Vagrant.has_plugin?('vagrant-cachier')
    config.cache.scope       = :box
    config.cache.auto_detect = true
  else
    STDERR.puts 'WARN: Vagrant-cachier plugin not detected. Continuing unoptimized.
                 You may want to install it with: `vagrant plugin install vagrant-cachier`.'
  end

  # Box
  config.vm.box = 'bento/ubuntu-18.04'

  # VM
  config.ssh.forward_agent = true
  config.vm.synced_folder '.', '/vagrant', disabled: true

  # Virtualbox
  config.vm.provider :virtualbox do |vb|
    vb.memory = 2000
    vb.cpus = 2
  end

  ### Chef-Server
  config.vm.define 'chef-server' do |chef_server|
    # VM
    chef_server.vm.hostname = 'chef-server' # MUST not contain spaces
    chef_server.vm.network :private_network, ip: CHEF_SERVER_IP

    # Chef solo provisioning via berks-vendored cookbooks
    chef_server.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = "#{CWB_CHEF_SERVER}/berks-cookbooks"
      chef.add_recipe 'cwb-chef-server'
      chef.json = {
          'chef-server' => {
              'version' => '12.18.14', # as of 2019-01-02 or nil for latest
              # Provide if cookbook service is not working correctly (i.e. cookbooks cannot be uploaded).
              # Attempts to automatically detect public IP via Ohai/What's my ip query
              # 'api_fqdn' => CHEF_SERVER_IP
              # List of commercial addons: https://github.com/chef-cookbooks/chef-server#attributes
              # The management console (mange) is free up to 25 nodes
              # 'addons' => %w(manage),
              # 'accept_license' => true
          }
      }
    end
  end

  ### CWB-Server
  config.vm.define 'cwb-server', primary: true do |cwb_server|
    # VM
    cwb_server.vm.hostname = 'cwb-server' # MUST not contain spaces
    cwb_server.vm.network :private_network, ip: CWB_SERVER_IP

    # Chef solo provisioning via berks-vendored cookbooks
    # Run `vendor_berks_cookbooks.sh` to pick up changes in the `cwb-server` cookbook
    cwb_server.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = "#{CWB_SERVER}/berks-cookbooks"
      chef.provisioning_path = '/etc/chef'
      chef.add_recipe 'cwb-server'
      # Using 2 attempts would be an alternative to specifiying explicit paths
      chef.attempts = 1
      # Refer to `cookbooks/cwb-server/attributes/default.rb` for an
      # extensive list of configurable attributes
      chef.json =
      {
          'cwb-server' => {
              'dev' => {
                  'tools' => %w(vim curl)
              },
              'ssh' => {
                  'key' => File.read(SSH_KEY_PATH),
                  'key_name' => SSH_KEY_NAME
              },
              'chef' => {
                  'server_host' => CHEF_SERVER_IP,
                  'node_name' => 'cwb-server',
                  'client_key' => File.read('cwb-server.pem'),
                  'client_key_name' => 'cwb-server',
                  'validation_key' => File.read('chef-validator.pem'),
                  'validation_key_name' => 'chef-validator',
                  # VM provisioning
                  # Chef versions: https://docs.chef.io/release_notes.html
                  # Notice that CWB is currently not yet compatible with Chef 13 and 14
                  # https://github.com/sealuzh/cwb-benchmarks/issues/20
                  'omnibus_chef_version' => '12.22.3'
              },
              'providers' => {
                  'aws' => {
                      'access_key' => AWS_ACCESS_KEY,
                      'secret_key' => AWS_SECRET_KEY
                  },
                  'google' => {
                      'project_id' => GOOGLE_PROJECT_ID,
                      'client_email' => GOOGLE_CLIENT_EMAIL,
                      'json_key_FILE' => (File.read(GOOGLE_JSON_KEY_PATH) rescue nil),
                  },
                  'azure' => {
                    'tenant_id' => AZURE_TENANT_ID,
                    'client_id' => AZURE_CLIENT_ID,
                    'client_secret' => AZURE_CLIENT_SECRET,
                    'subscription_id' => AZURE_SUBSCRIPTION_ID
                  }
              },
              'env' => {
                  'SECRET_KEY_BASE' => read_or_cache('secret_key_base.env', SecureRandom.hex(64)),
                  'LOG_LEVEL' => 'debug' # Rails log levels: debug, info, warn, error, fatal, unknown
              },
              'app' => {
                'branch' => 'master',
                'user_password' => 'demo',
                # Determines how many benchmarks can be prepared, started, or released in parallel.
                # Keep in mind that workers are memory-intensive because the currently load the entire Rails environment.
                'num_workers' => 2
              },
              'db' => {
                'password' => 'cloud',
                'postgres_password' => 'rootcloud'
              },
              'nginx' => {
                # 'hostname' => 'PUBLIC_HOST_OR_IP'
              }
          },
          # For a list of time zones see: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
          'tz' => 'Europe/Zurich',
      }
    end
  end
end
